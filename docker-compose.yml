
services:
  # MongoDB数据库
  mongo:
    image: mongo:7.0
    container_name: policypulse-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-policypulse}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./backend/data/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - policypulse-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis缓存和消息队列
  redis:
    image: redis:7.2-alpine
    container_name: policypulse-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - policypulse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # FastAPI后端服务
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: policypulse-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/${MONGO_DATABASE:-policypulse}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - SMS_ACCESS_KEY=${SMS_ACCESS_KEY}
      - SMS_SECRET_KEY=${SMS_SECRET_KEY}
      - SMS_REGION=${SMS_REGION:-cn-north-1}
      - SMS_SIGN_NAME=${SMS_SIGN_NAME:-PolicyPulse}
      - WECHAT_APP_ID=${WECHAT_APP_ID}
      - WECHAT_MCH_ID=${WECHAT_MCH_ID}
      - WECHAT_KEY=${WECHAT_KEY}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/data:ro
      - ./backend/logs:/app/logs
    networks:
      - policypulse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Celery任务处理服务
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: policypulse-worker
    restart: unless-stopped
    command: celery -A workers.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/${MONGO_DATABASE:-policypulse}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CRAWL_DELAY=${CRAWL_DELAY:-3}
      - CRAWL_TIMEOUT=${CRAWL_TIMEOUT:-30}
      - MAX_RETRY_COUNT=${MAX_RETRY_COUNT:-3}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/data:ro
      - ./backend/logs:/app/logs
    networks:
      - policypulse-network
    healthcheck:
      test: ["CMD", "celery", "-A", "workers.celery_app", "status"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Celery Beat定时任务服务
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: policypulse-beat
    restart: unless-stopped
    command: celery -A workers.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/${MONGO_DATABASE:-policypulse}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/data:ro
      - ./backend/logs:/app/logs
    networks:
      - policypulse-network

  # Next.js前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: policypulse-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-PolicyPulse}
    depends_on:
      - api
    volumes:
      - ./frontend/public:/app/public:ro
    networks:
      - policypulse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: policypulse-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - policypulse-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local

networks:
  policypulse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16